//Bob and Alice have teamed up on a game show. After winning the first round, they now have access to a maze with hidden gold. If Bob can collect all the gold coins and deliver them to Alice's position, they can split the gold. Bob can move horizontally or vertically as long as he stays in the maze, and the cell is not blocked.

//The maze is represented by an n Ã— m array. Each cell has a value, where 0 is open, 1 is blocked, and 2 is open with a gold coin. Bob starts at the top left in cell in (row, column) = (0, 0). Alice's position is given by (x,y).

//Determine the shortest path Bob can follow to collect all gold coins and deliver them to Alice. If Bob can't collect and give all the gold coins, return -1.
#include<bits/stdc++.h>
using namespace std;
int dy[4]={1,0,-1,0};
int dx[4]={0,1,0,-1};

void dfs(int row,int col,int x,int y,int step,int collect,vector<vector<int>>& mat,vector<vector<int>>& vis,int& minPath,int total)
{
    vis[row][col]=1;
    if(row==x && col==y)
    {
        if(collect==total)
        {
            minPath=min(minPath,step);
           // cout<<"fuck"<<"\n";
        }
        vis[row][col]=0;
        return;
    }
    int nC=collect;
    if(mat[row][col]==2)
    {
        nC++;
    }
    for(int i=0;i<4;i++)
    {
        int nRow=row+dx[i];
        int nCol=col+dy[i];
        if(nRow<0 || nRow>=mat.size() || nCol<0 || nCol>=mat[0].size() || vis[nRow][nCol]==1)
        {
            continue;
        }
        if(mat[nRow][nCol]!=1)
        {
            dfs(nRow,nCol,x,y,step+1,nC,mat,vis,minPath,total);
        }
    }
    vis[row][col]=0;
}

int main()
{
    int n,m;
    cin>>n>>m;
    vector<vector<int>> mat(n,vector<int>(m));
    vector<vector<int>> vis(n,vector<int>(m,0));
    int i,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            cin>>mat[i][j];
        }
    }
    int minPath=INT_MAX,total=0;
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            if(mat[i][j]==2)
            total++;
        }
    }
    int x,y;
    cin>>x>>y;
    dfs(0,0,x,y,0,0,mat,vis,minPath,total);
    if(minPath==INT_MAX)
    cout<<"-1"<<"\n";
    else
    cout<<minPath<<"\n";
}
